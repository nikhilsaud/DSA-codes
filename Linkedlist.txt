 import java.util.*;
    class Node{
        int i;
        Node next;
    }
    class Linked{
         public Node delete(Node node) {
    if (node == null || node.next == null) {
      return null;
    }
    
    Node tmp = node;

    while(tmp.next.next != null) {
      tmp = tmp.next;
    }
    
    tmp.next = null;
    return node;
  }
        //insert at particular postion
        public Node insertAtPosition(int i, int position, Node node) {
    if (position < 0) {
      System.out.println("Position can't be less than 1");
    }
    
    if (node == null && position > 1) {
      System.out.println("Position is greater than element exists");
      return node;
    }

    if (node == null && position == 1) {
      return getNewNode(i);
    }

    if (position == 1) {
      Node newNode = getNewNode(i);
      newNode.next = node;
      return newNode;
    }
    
    node.next = insertAtPosition(i, position - 1, node.next);
    return node;
  }
        //delete at particular position
         public Node deleteAtPosition(int position, Node node) {
    if(position < 0) {
      System.out.println("Not a valid position");
      return node;
    }
    
    if(node == null && position > 0) {
      System.out.println("Position not valid");
      return node;
    }
    
    if(position == 1) {
      return node.next;
    }
    
    node.next = deleteAtPosition(position - 1, node.next);
    return node;
  }
         public Node deleteFront(Node node) {
    if (node == null) {
      return null;
    }
    return node.next;
  }
  
        //insert at begining
          public Node insertAtStart(Node node, int i) {
    if (node == null)
      return getNewNode(i);
    Node newNode = getNewNode(i);
    newNode.i = i;
    newNode.next = node;
    return newNode;
  }
  // print linkedlist
        public void printls(Node node){
            if(node==null){
                return;
            }
            System.out.print(node.i+" ");
            printls(node.next);
        }
        //assigning node values
       public Node getNewNode(int i){
            Node a=new Node();
            a.i=i;
            a.next=null;
            return a;
        }
    //inserting nodes
        public Node insert(int i,Node node){
            //checking node is empty or not
            if(node==null){
                return getNewNode(i);
            }
            else{
                node.next=insert(i,node.next);
                
            }
            return node;
        }
    }
    
public class Main
{
	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
	    	Node root=null;
	Linked a=new Linked();
	    int n=sc.nextInt();
	    for(int i=0;i<n;i++){
	        root=a.insert(sc.nextInt(),root);
	    }

	
	//root =a.insert(1,root);
	//root =a.insert(2,root);
	//	root =a.insert(3,root);
	root=a.insertAtStart(root,100);
		a.printls(root);
		root =a.deleteFront(root);
		a.printls(root);
		root=a.deleteAtPosition(3,root);
		a.printls(root);
		root=a.insertAtPosition(9,2,root);
		a.printls(root);
		root=a.delete(root);
		a.printls(root);
	}
}